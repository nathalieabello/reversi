package player;

import java.util.Optional;

import events.IMoveEvent;
import model.board.Coordinate;
import model.board.ReadOnlyModel;
import model.cell.DiscColor;
import strategy.HumanStrategy;

/**
 * Represents a human player in the game that makes move through the GUI View.
 */
public class HumanPlayer implements Player, IMoveEvent {
  private final DiscColor playerColor;
  private final HumanStrategy strategy;
  private int play;

  /**
   * Constructs a human player.
   */
  public HumanPlayer(DiscColor playerColor, ReadOnlyModel model) {
    super();
    if (playerColor == null || playerColor == DiscColor.NONE || model == null) {
      throw new IllegalArgumentException("Arguments cannot be null.");
    }
    this.playerColor = playerColor;
    this.strategy = new HumanStrategy();
    this.play = -1;
  }

  /**
   * Constructs a human player for testing.
   */
  public HumanPlayer(DiscColor playerColor, HumanStrategy strategy, ReadOnlyModel model) {
    super();
    if (playerColor == null || playerColor == DiscColor.NONE
            || strategy == null || model == null) {
      throw new IllegalArgumentException("Arguments cannot be null.");
    }
    this.playerColor = playerColor;
    this.strategy = strategy;
  }

  /**
   * Try to play a move for the given player based on the strategy.
   *
   * @param model is the model to play the move on.
   * @return the coordinates of the move.
   * @throws IllegalArgumentException if the model is null.
   * @throws IllegalStateException    if no cell is selected.
   * @throws IllegalArgumentException if the move coordinates cannot be generated by the strategy.
   */
  @Override
  public Optional<Coordinate> play(ReadOnlyModel model) {
    if (model == null) {
      throw new IllegalArgumentException("Model cannot be null.");
    }

    Optional<Coordinate> moveCoordinates; // the coordinates of the move.
    moveCoordinates = this.strategy.move();

    if (this.play == 0) {
      if (moveCoordinates.isEmpty()) {
        throw new IllegalStateException("No cell selected."); // no cell selected.
      }
    }

    return moveCoordinates;
  }

  @Override
  public DiscColor getPlayerColor() {
    return this.playerColor;
  }

  @Override
  public boolean isHuman() {
    return true;
  }

  /**
   * Notifies the human player of the move that was made.
   *
   * @param play         is the play that was made.
   * @param selectedCell is the cell that was selected.
   */
  @Override
  public void notifyOfMoveOrPass(int play, Coordinate selectedCell) {
    System.out.println("NOTIFY HumanPlayer that the move has been made on the view.");
    this.play = play;
    this.strategy.notifyOfMoveOrPass(play, selectedCell);
  }

  /**
   * Resets the move that was previously made.
   */
  public void resetMove() {
    this.play = -1;
    this.strategy.resetChoice(); // reset choice.
  }
}
